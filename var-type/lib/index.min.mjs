var r=class e{typeList;static _instance=null;constructor(){this.typeList=["Null","Undefined","Object","Array","ArrayBuffer","String","Number","Boolean","Function","RegExp","Date","FormData","File","Blob","URLSearchParams","Set","WeakSet","Map","WeakMap"],this.init()}static get instance(){return e._instance||(e._instance=new e),e._instance}type(t){return Object.prototype.toString.call(t).match(/\[object (.*?)\]/)[1].toLowerCase()}init(){let t=this;this.typeList.forEach(n=>{Object.defineProperty(e.prototype,`is${n}`,{value:function(i){return t.type(i)===n.toLowerCase()},writable:!0,configurable:!0})})}static isBuffer(t){return t!==null&&e.isUndefined(t)&&t.constructor!==null&&e.isUndefined(t.constructor)&&typeof t.constructor.isBuffer=="function"&&t.constructor.isBuffer(t)}static isStream(t){return e.isObject(t)&&e.isFunction(t.pipe)}},s=r.instance;export{s as varType};
